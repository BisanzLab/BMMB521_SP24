install.packages("devtools") # A multi-purpose tool for developing packages
devtools::install_github("jbisanz/qiime2R") # A multi-purpose microbiome import/processing package written by yours truly
library(tidyverse)
library(dada2)
library(phyloseq)
library(ape)
library(vegan)
library(qiime2R)
library(lme4)
dir.create("~/Desktop/BMS270_tutorial")
setwd("~/Desktop/BMS270_tutorial")
download.file("https://github.com/jbisanz/BMS270_SP2021/raw/main/BMS270_SP2021_reads.tar.gz", "BMS270_SP2021_reads.tar.gz")
untar("BMS270_SP2021_reads.tar.gz")
list.files("reads")
download.file("https://github.com/jbisanz/BMS270_SP2021/raw/main/metadata.tsv","metadata.tsv")
read_tsv("metadata.tsv")
download.file("https://zenodo.org/record/4310151/files/rdp_species_assignment_18.fa.gz", "rdp_species_assignment_18.fa.gz")
download.file("https://zenodo.org/record/4310151/files/rdp_train_set_18.fa.gz", "rdp_train_set_18.fa.gz")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, cache = TRUE, message=F, warning=F)
# Chunk 4
library(tidyverse)
library(dada2)
library(phyloseq)
library(ape)
library(vegan)
library(qiime2R)
library(lme4)
# Chunk 9
list.files("reads")
# Chunk 11
read_tsv("metadata.tsv")
dir.create("~/Desktop/BMMB521_tutorial") #Note: windows users would use dir.create("C:\Users\YourUserName\Desktop\BMMB521_tutorial")
setwd("~/Desktop/BMMB521_tutorial") #Note: windows users would use setwd("C:\Users\YourUserName\Desktop\BMMB521_tutorial")
download.file("https://github.com/jbisanz/BMS270_SP2021/raw/main/BMS270_SP2021_reads.tar.gz", "BMMB521_reads.tar.gz")
untar("BMMB521_reads.tar.gz")
list.files("reads")
download.file("https://github.com/jbisanz/BMS270_SP2021/raw/main/metadata.tsv","metadata.tsv")
read_tsv("metadata.tsv")
download.file("https://zenodo.org/record/4310151/files/rdp_species_assignment_18.fa.gz", "rdp_species_assignment_18.fa.gz")
download.file("https://zenodo.org/record/4310151/files/rdp_train_set_18.fa.gz", "rdp_train_set_18.fa.gz")
knitr::knit_exit()
metadata<-read_tsv("metadata.tsv") %>% mutate(Group=factor(Group, c("pre-diet","post-diet")))
metadata %>% count(Group, Time_days)
setwd("~/bisanzlab/github/BMMB521_SP24/")
metadata<-read_tsv("metadata.tsv") %>% mutate(Group=factor(Group, c("pre-diet","post-diet")))
View(metadata)
metadata %>% count(Group, Time_days)
plotQualityProfile(metadata$Read1[1:3]) + ggtitle("Forward Read Quality (R1)")
untar("BMMB521_reads.tar.gz")
list.files("reads")
plotQualityProfile(metadata$Read1[1:3]) + ggtitle("Forward Read Quality (R1)")
plotQualityProfile(metadata$Read2[1:3]) + ggtitle("Reverse Read Quality (R2)")
dir.create("filtered_reads")
metadata<-
metadata %>%
mutate(Read1_filtered=paste0("filtered_", Read1)) %>%
mutate(Read2_filtered=paste0("filtered_", Read2))
trimlog <- filterAndTrim(
fwd=metadata$Read1,
rev=metadata$Read2,
filt=metadata$Read1_filtered,
filt.rev=metadata$Read2_filtered,
compress=TRUE, # use gzip compression to save space
truncLen=c(240,140), # trim back the reads on the 3' end
trimLeft=5, # remove 5 bases from the beginning as these q scores may not be reliable
maxEE=2, # no more than 2 expected errors per reads
truncQ=2, # trim the read after a q score of 2
multithread=TRUE, # use multiple processors, you may need to set this to FALSE on PCs
rm.phix=TRUE, # Remove reads mapping to phiX
verbose=TRUE
)
?filterAndTrim
trimlog
trimlog %>%
as.data.frame() %>%
mutate(Percent_Passed=reads.out/reads.in*100) %>%
interactive_table()
forward_error<-learnErrors(metadata$Read1_filtered, multithread = TRUE)
reverse_error<-learnErrors(metadata$Read2_filtered, multithread = TRUE)
forward_denoised<- dada(metadata$Read1_filtered, err=forward_error, multithread=TRUE)
reverse_denoised<- dada(metadata$Read2_filtered, err=reverse_error, multithread=TRUE)
merged_reads <- mergePairs(
dadaF=forward_denoised,
derepF=metadata$Read1_filtered,
dadaR=reverse_denoised,
derepR=metadata$Read2_filtered,
verbose=TRUE
)
merged_table <- makeSequenceTable(merged_reads)
asv_table<-removeBimeraDenovo(merged_table, method="pooled", multithread=TRUE, verbose=TRUE)
sum(asv_table)/sum(merged_table)*100
asv_table<-t(asv_table)
asv_table<-asv_table[,basename(metadata$Read1_filtered)] #put columns in the same order as the metadata
colnames(asv_table)<-metadata$SampleID #overwrite the column names
sequences<-tibble(ASV=paste0("ASV_",1:nrow(asv_table)), Sequence=rownames(asv_table))
rownames(asv_table)<-sequences$ASV
save.image("images/processing.Rdata")
tibble(Organism=c("E. coli","L. rhamnosus","S. aureus"), SampleA=c(99,1,1), SampleB=c(50,50,0)) %>% knitr::kable()
asv_table
colSums(asv_table)
asv_table_subsample<-subsample_table(asv_table)
diversity(asv_table_subsample, index="shannon", MARGIN=2)
specnumber(asv_table_subsample, MARGIN=2)
specnumber(asv_table_subsample, MARGIN=1)
diversity_table
diversity_table<-
data.frame(
Shannon=diversity(asv_table_subsample, index="shannon", MARGIN=2),
Obs_ASVs=specnumber(asv_table_subsample, MARGIN=2)
) %>%
rownames_to_column("SampleID") %>%
full_join(metadata) %>%
select(SampleID, Group, MouseID, Time_days, Shannon, Obs_ASVs)
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, fill=Group)) +
stat_summary(geom="ribbon", alpha=0.5) +
geom_jitter(width=1, height=0, shape=21) +
facet_wrap(~Metric, scales="free") +
theme_q2r() +
xlab("Days Post Colonization") +
ylab("Alpha Diversity") +
scale_fill_manual(values=c("cornflowerblue","indianred"))
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
geom_jitter(width=1, height=0, shape=21) +
facet_wrap(~Metric, scales="free") +
theme_q2r() +
xlab("Days Post Colonization") +
ylab("Alpha Diversity") +
scale_fill_manual(values=c("cornflowerblue","indianred"))
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
geom_jitter(width=1, height=0) +
facet_wrap(~Metric, scales="free") +
theme_q2r() +
xlab("Days Post Colonization") +
ylab("Alpha Diversity") +
scale_fill_manual(values=c("cornflowerblue","indianred"))
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
geom_point() +
geom_jitter(width=1, height=0) +
facet_wrap(~Metric, scales="free") +
theme_q2r() +
xlab("Days Post Colonization") +
ylab("Alpha Diversity") +
scale_fill_manual(values=c("cornflowerblue","indianred"))
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
geom_point() +
#geom_jitter(width=1, height=0) +
facet_wrap(~Metric, scales="free") +
theme_q2r() +
xlab("Days Post Colonization") +
ylab("Alpha Diversity") +
scale_fill_manual(values=c("cornflowerblue","indianred"))
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar")
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar", width=0.2) +
geom_point() +
#geom_jitter(width=1, height=0) +
facet_wrap(~Metric, scales="free") +
theme_q2r() +
xlab("Days Post Colonization") +
ylab("Alpha Diversity") +
scale_fill_manual(values=c("cornflowerblue","indianred"))
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar", width=0.5) +
geom_point() +
#geom_jitter(width=1, height=0) +
facet_wrap(~Metric, scales="free") +
theme_q2r() +
xlab("Days Post Colonization") +
ylab("Alpha Diversity") +
scale_fill_manual(values=c("cornflowerblue","indianred"))
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar", width=0.5, fun.data=mean_sd)
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar", width=0.5, fun.data=mean_sd) +
geom_point()
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar", width=0.5, fun.data=mean_sd) +
geom_jitter(width=1, height=0)
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar", width=0.5, fun.data=mean_sd) +
geom_jitter(width=1, height=0) +
facet_wrap(~Metric, scales="free")
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar", width=0.5, fun.data=mean_sd) +
geom_jitter(width=1, height=0) +
facet_wrap(~Metric, scales="free") +
theme_q2r()
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar", width=0.5, fun.data=mean_sd) +
geom_jitter(width=1, height=0) +
facet_wrap(~Metric, scales="free") +
theme_q2r() +
xlab("Days Post Colonization") +
ylab("Alpha Diversity")
diversity_table %>%
pivot_longer(c(Shannon, Obs_ASVs), names_to="Metric", values_to="Diversity") %>%
ggplot(aes(x=Time_days, y=Diversity, color=Group)) +
stat_summary(geom="line") +
stat_summary(geom="errorbar", width=0.5, fun.data=mean_sd) +
geom_jitter(width=1, height=0) +
facet_wrap(~Metric, scales="free") +
theme_q2r() +
xlab("Days Post Colonization") +
ylab("Alpha Diversity") +
scale_color_manual(values=c("cornflowerblue","indianred"))
ggsave("figures/diversity.pdf", height=3, width=5)
dir.create("figures")
diversity_table
diversity_table %>%
filter(Time_days==1)
diversity_table %>%
filter(Time_days==1) %>%
t.test(Shannon~Group)
diversity_table %>%
filter(Time_days==1) %>%
t.test(Shannon~Group, data=.)
diversity_table %>%
filter(Time_days==1) %>%
wilcox.test(Shannon~Group, data=.)
diversity_table %>%
filter(Time_days==15) %>%
wilcox(Shannon~Group, data=.)
diversity_table %>%
filter(Time_days==15) %>%
wilcox.test(Shannon~Group, data=.)
diversity_table %>%
filter(Time_days==14) %>%
wilcox.test(Shannon~Group, data=.)
diversity_table %>%
filter(Time_days==1) %>%
t.test(Shannon~Group, data=.)
fit<-glmer.nb(Obs_ASVs~Group*Time_days+(1|MouseID), data=diversity_table)
install.packages("Matrix")
install.packages("Matrix")
fit<-glmer.nb(Obs_ASVs~Group*Time_days+(1|MouseID), data=diversity_table)
library(tidyverse)
library(dada2)
library(phyloseq)
library(ape)
library(vegan)
library(qiime2R)
library(lme4)
library(tidyverse)
library(dada2)
library(phyloseq)
library(ape)
library(vegan)
library(qiime2R)
library(lme4)
fit<-glmer.nb(Obs_ASVs~Group*Time_days+(1|MouseID), data=diversity_table)
summary(fit)
?glmer.nb
clr_euc<-asv_table %>% make_clr() %>% t() %>% vegdist(method="euclidean")
as.matrix(clr_euc) %>% corner()
pc<-pcoa(clr_euc)
pc
pc$vectors %>%
as.data.frame() %>%
rownames_to_column("SampleID") %>%
left_join(metadata) %>%
arrange(Time_days) %>%
ggplot(aes(x=Axis.1, y=Axis.2, group=MouseID, color=Group, label=Time_days)) +
geom_path(arrow=arrow(type="closed", length=unit(0.1,"cm"))) +
#geom_text() +
theme_q2r() +
scale_color_manual(values=c("cornflowerblue","indianred")) +
xlab(paste("PC1:",round(pc$values$Relative_eig[1]*100,2),"%")) +
ylab(paste("PC2:",round(pc$values$Relative_eig[2]*100,2),"%"))
adonis(clr_euc~Group*Time_days, data=metadata , strata = metadata$MouseID, permutations = 9999)
adonis2(clr_euc~Group*Time_days, data=metadata , strata = metadata$MouseID, permutations = 9999)
taxonomy <- assignTaxonomy(sequences$Sequence, "rdp_train_set_18.fa.gz", multithread=TRUE)
taxonomy <- addSpecies(taxonomy, "rdp_species_assignment_18.fa.gz", allowMultiple = TRUE)
taxonomy
taxonomy<-
taxonomy %>%
as.data.frame() %>%
rownames_to_column("Sequence") %>%
left_join(sequences) %>%
select(ASV, everything()) %>%
select(-Sequence) %>%
column_to_rownames("ASV")
taxonomy
View(taxonomy)
taxa_sums<-summarize_taxa(asv_table, taxonomy)
taxa_barplot(features = taxa_sums$Phylum, metadata = metadata, category = "Group")
taxa_barplot(features = taxa_sums$Genus, metadata = metadata, category = "Group")
ggsave("figures/barplot.pdf", height=3, width=8)
taxa_sums$Phylum %>%
make_clr() %>%
as.data.frame() %>%
rownames_to_column("Taxon") %>%
pivot_longer(!Taxon, names_to="SampleID", values_to = "CLR") %>%
left_join(metadata) %>%
ggplot(aes(x=Group, y=CLR, fill=Group)) +
geom_boxplot() +
theme_q2r() +
facet_wrap(~Taxon, scales="free")
taxa_sums$Genus %>%
make_clr() %>%
as.data.frame() %>%
rownames_to_column("Taxon") %>%
pivot_longer(!Taxon, names_to="SampleID", values_to = "CLR") %>%
left_join(metadata) %>%
ggplot(aes(x=Group, y=CLR, fill=Group)) +
geom_boxplot() +
theme_q2r() +
facet_wrap(~Taxon, scales="free")
taxa_sums$Family %>%
make_clr() %>%
as.data.frame() %>%
rownames_to_column("Taxon") %>%
pivot_longer(!Taxon, names_to="SampleID", values_to = "CLR") %>%
left_join(metadata) %>%
ggplot(aes(x=Group, y=CLR, fill=Group)) +
geom_boxplot() +
theme_q2r() +
facet_wrap(~Taxon, scales="free")
taxa_sums$Phylum %>%
make_clr() %>%
as.data.frame() %>%
rownames_to_column("Taxon") %>%
pivot_longer(!Taxon, names_to="SampleID", values_to = "CLR") %>%
left_join(metadata) %>%
ggplot(aes(x=Group, y=CLR, fill=Group)) +
geom_boxplot() +
theme_q2r() +
facet_wrap(~Taxon, scales="free")
taxa_sums$Phylum %>%
make_percent() %>%
as.data.frame() %>%
rownames_to_column("Taxon") %>%
pivot_longer(!Taxon, names_to="SampleID", values_to = "CLR") %>%
left_join(metadata) %>%
ggplot(aes(x=Time_days, y=CLR, color=Group)) +
stat_summary(geom="line") +
geom_jitter(width=1) +
theme_q2r() +
facet_wrap(~Taxon, scales="free")
taxa_heatmap(
features = taxa_sums$Genus,
metadata = metadata,
category = "Group"
)
ggsave("figures/heatmap.pdf", height=4, width=6)
asv_table_filtered<-filter_features(asv_table, minsamples = 3, minreads = 10)
results<-
asv_table_filtered %>%
make_clr() %>%
as.data.frame() %>%
rownames_to_column("ASV") %>%
pivot_longer(!ASV, names_to="SampleID", values_to="CLR") %>%
left_join(metadata) %>%
group_by(ASV) %>%
do(
lmerTest::lmer(CLR~Group*Time_days+(1|MouseID), data=.) %>%
summary() %>%
.$coefficients %>%
as.data.frame() %>%
rownames_to_column("Term")
)
results<-
results %>%
filter(Term=="Grouppost-diet") %>%
ungroup() %>%
mutate(FDR=p.adjust(`Pr(>|t|)`, method="fdr")) %>%
mutate(Significant=if_else(FDR<0.1 & abs(Estimate)>1, "Significant","ns")) %>%
left_join(taxonomy %>% rownames_to_column("ASV"))
interactive_table()
interactive_table(results)
?p.adjust
results
View(results)
results<-
asv_table_filtered %>%
make_clr() %>%
as.data.frame() %>%
rownames_to_column("ASV") %>%
pivot_longer(!ASV, names_to="SampleID", values_to="CLR") %>%
left_join(metadata) %>%
group_by(ASV) %>%
do(
lmerTest::lmer(CLR~Group*Time_days+(1|MouseID), data=.) %>%
summary() %>%
.$coefficients %>%
as.data.frame() %>%
rownames_to_column("Term")
)
View(results)
clean_results<-
results %>%
filter(Term=="Grouppost-diet") %>%
ungroup() %>%
mutate(FDR=p.adjust(`Pr(>|t|)`, method="fdr")) %>%
mutate(Significant=if_else(FDR<0.1 & abs(Estimate)>1, "Significant","ns")) %>%
left_join(taxonomy %>% rownames_to_column("ASV"))
clean_results<-
results %>%
filter(Term=="Grouppost-diet") %>%
ungroup() %>%
mutate(FDR=p.adjust(`Pr(>|t|)`, method="fdr")) %>%
mutate(Significant=if_else(FDR<0.1 & abs(Estimate)>1, "Significant","ns")) %>%
left_join(taxonomy %>% rownames_to_column("ASV"))
interactive_table(clean_results)
clean_results %>%
ggplot(aes(x=Estimate, y=-log10(`Pr(>|t|)`), color=Significant)) +
geom_point(alpha=0.5, shape=16) +
xlab("log2(fold change)") +
ylab("-log10(P-value)") +
theme_q2r() +
scale_color_manual(values=c("grey50","indianred")) +
theme(legend.position="none")
ggsave("figures/volcanoplot.pdf", height=2, width=2)
asv_table_subsample %>%
make_clr() %>%
as.data.frame() %>%
rownames_to_column("ASV") %>%
pivot_longer(!ASV, names_to="SampleID", values_to="CLR") %>%
filter(ASV=="ASV_22") %>%
left_join(metadata) %>%
ggplot(aes(x=Time_days, y=CLR, fill=Group)) +
stat_summary(geom="ribbon", alpha=0.5) +
geom_jitter(height=0, width=1, shape=21) +
theme_q2r() +
scale_fill_manual(values=c("cornflowerblue","indianred")) +
theme(legend.position="none")
asv_table %>%
make_clr() %>%
as.data.frame() %>%
rownames_to_column("ASV") %>%
pivot_longer(!ASV, names_to="SampleID", values_to="CLR") %>%
filter(ASV=="ASV_22") %>%
left_join(metadata) %>%
ggplot(aes(x=Time_days, y=CLR, fill=Group)) +
stat_summary(geom="ribbon", alpha=0.5) +
geom_jitter(height=0, width=1, shape=21) +
theme_q2r() +
scale_fill_manual(values=c("cornflowerblue","indianred")) +
theme(legend.position="none")
View(taxonomy)
asv_table %>%
make_clr() %>%
as.data.frame() %>%
rownames_to_column("ASV") %>%
pivot_longer(!ASV, names_to="SampleID", values_to="CLR") %>%
filter(ASV=="ASV_41") %>%
left_join(metadata) %>%
ggplot(aes(x=Time_days, y=CLR, fill=Group)) +
stat_summary(geom="ribbon", alpha=0.5) +
geom_jitter(height=0, width=1, shape=21) +
theme_q2r() +
scale_fill_manual(values=c("cornflowerblue","indianred")) +
theme(legend.position="none")
clean_results<-
results %>%
filter(Term=="Grouppost-diet") %>%
ungroup() %>%
mutate(FDR=p.adjust(`Pr(>|t|)`, method="fdr")) %>%
mutate(Significant=if_else(FDR<0.1 & abs(Estimate)>1, "Significant","ns")) %>%
left_join(taxonomy %>% rownames_to_column("ASV"))
interactive_table(clean_results)
clean_results<-
results %>%
filter(Term=="Grouppost-diet") %>%
ungroup() %>%
mutate(FDR=p.adjust(`Pr(>|t|)`, method="fdr")) %>%
mutate(Significant=if_else(FDR<0.1 & abs(Estimate)>1, "Significant","ns")) %>%
left_join(taxonomy %>% rownames_to_column("ASV"))
save.image(file="Completed.Rdata")
list.files("reads")
